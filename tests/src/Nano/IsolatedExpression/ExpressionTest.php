<?php
namespace Nano\IsolatedExpression;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-09-10 at 21:16:22.
 */
class ExpressionTest extends TestCase
{

    /**
     * @var Expression
     */
    private $expression;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        Expression::$PHP = 'php';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Nano\IsolatedExpression\Expression::evaluate
     */
    public function testEvaluateDataModification()
    {
        $code = '$this->number*=2;$this->string.=" test";$this->array[]=4;';
        $expression = new Expression($code);
        $expression->number = 100;
        $expression->string = 'hello';
        $expression->array = [1, 2, 3];
        $response = $expression->evaluate();
        $this->assertEquals(200, $response->number);
        $this->assertEquals('hello test', $response->string);
        $this->assertEquals([1, 2, 3, 4], $response->array);
    }

    /**
     * @covers Nano\IsolatedExpression\Expression::evaluate
     */
    public function testEvaluateStringExpression()
    {
        $expression = new Expression('return "hola mundo";');
        $response = $expression->evaluate();
        $this->assertEquals('hola mundo', $response);
    }

    /**
     * @covers Nano\IsolatedExpression\Expression::__invoke
     */
    public function testCallDataModification()
    {
        $code = '$this->number*=2;$this->string.=" test";$this->array[]=4;';
        $expression = new Expression($code);
        $expression->number = 100;
        $expression->string = 'hello';
        $expression->array = [1, 2, 3];
        $response = $expression();
        $this->assertEquals(200, $response->number);
        $this->assertEquals('hello test', $response->string);
        $this->assertEquals([1, 2, 3, 4], $response->array);
    }

    /**
     * @covers Nano\IsolatedExpression\Expression::__invoke
     */
    public function testCallStringExpression()
    {
        $expression = new Expression('return "hola mundo";');
        $response = $expression();
        $this->assertEquals('hola mundo', $response);
    }

    /**
     * @covers Nano\IsolatedExpression\Expression::__invoke
     */
    public function testCallDefinedMethod()
    {
        $expression = new TestMethodsExpression('return upper("hola mundo");');
        $response = $expression();
        $this->assertEquals('HOLA MUNDO', $response);
    }
}
